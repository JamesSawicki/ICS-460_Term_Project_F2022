/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/0b1e4478-9649-48ac-8bdd-678df9648ecb

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String oledDisplayText;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // code from https://docs.arduino.cc/tutorials/mkr-wifi-1010/oled-display
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // loop forever if library fails to initialize
  }

  display.setTextColor(SSD1306_WHITE); //set text to white

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
}


/*
  Since OledDisplayText is READ_WRITE variable, onOledDisplayTextChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onOledDisplayTextChange()  {
  Serial.println("text change event occurred");
  display.clearDisplay(); // clear display

  if (oledDisplayText.length() > 0 && oledDisplayText.length() <= 5) { //messages between 1 and 5 characters activates text-size 3
    display.setTextSize(3);
    Serial.println("display has been updated with: " + oledDisplayText); // print the message in Serial monitor for feedback
  }

  if (oledDisplayText.length() > 6 &&  oledDisplayText.length() <= 20) { //messages between 6 and 20 characters activates text-size 2
    display.setTextSize(2);
    Serial.println("display has been updated with: " + oledDisplayText); // print the message in Serial monitor for feedback
  }

  if (oledDisplayText.length() >= 21) { //messages longer than 21 characters activates text-size 1
    display.setTextSize(1);
    Serial.println("display has been updated with: " + oledDisplayText); // print the message in Serial monitor for feedback
  }

  display.setCursor(0, 0);  //start printing at top left corner
  display.println(oledDisplayText); //prints the content of the message string on the display
  display.display(); //transfers the buffer to the display
  oledDisplayText = "";
}
